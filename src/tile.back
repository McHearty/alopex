
#include "alopex.h"

static int resize_container(Monitor *, Container *, int, int);
static Bool tile_check(Monitor *, Container *, Client *);
static int tile_container(Monitor *, Container *, Client *, int);

int tile() {
	Monitor *M;
	Container *C;
	Client *c, *pc;
	int num, cn, numC, ord;
	for (M = mons; M; M = M->next) {
		/* calculate how many containers will be used: */
		if (M->mode == MONOCLE) numC = 1;
		else {
			c = clients;
			for (numC = 0, C = M->container; C; C = C->next, numC++) {
				cn = (M->mode == MONOCLE ? 1024 : (C->n > 0 ? C->n : 1024));
				for (num = 0, pc = c; c && num < cn; c = c->next)
					if (tile_check(M, C, c)) num++;
				if (num == 0) break;
			}
		}
		/* tile each used container: */
		c = clients;
		for (ord = 0, C = M->container; C; C = C->next, ord++) {
			cn = (M->mode == MONOCLE ? 1024 : (C->n > 0 ? C->n : 1024));
			for (num = 0, pc = c; c && num < cn; c = c->next)
				if (tile_check(M, C, c)) num++;
			resize_container(M, C, numC, ord);
			tile_container(M, C, pc, num);
		}
		for (c = clients; c; c = c->next) {
			// TODO tile floaters
		}
	}
}


int resize_container(Monitor *M, Container *C, int numC, int ord) {
	int stack_size;
	if (numC == 1) {
		C->x = M->x + M->gap;
		C->y = M->y + M->gap;
		C->w = M->w - 2 * M->gap;
		C->h = M->h - 2 * M->gap;
	}
	else if (M->mode == RSTACK) {
		stack_size = (M->h - M->gap) / (numC - 1) - M->gap;
		C->x = M->x + M->gap + (ord ? (M->w -  M->gap) / 2 + M->split: 0);
		C->y = M->y + M->gap + (stack_size + M->gap) * (ord ? ord - 1 : 0);
		C->w = (ord ? M->w - M->gap - C->x - M->split :
				(M->w - M->gap) / 2 - M->gap + M->split);
		C->h = (ord ? stack_size : M->h - 2 * M->gap); // -
		if (ord == numC - 1) C->h = M->h - M->gap - C->y + M->y;
	}
	else if (M->mode == BSTACK) {
		// TODO
	}
	if (!(C->bar_opts & BAR_HIDE)) {
		C->h -= C->bar->h;
		if (!(C->bar_opts & BAR_BOTTOM))
			C->y += C->bar->h;
	}
}

Bool tile_check(Monitor *M, Container *C, Client *c) {
	return ((M->tags | c->tags) && !(c->flags & WIN_FLOAT));
}

int tile_container(Monitor *M, Container *C, Client *pc, int num) {
	//TODO get / set C->top
	Client *c;
	if (C->bar_opts & BAR_HIDE) purgatory(C->win);
	else {
		if (C->bar_opts & BAR_BOTTOM)
			XMoveResizeWindow(dpy, C->win, C->x, C->y+C->h, C->w, C->bar->h);
		else
			XMoveResizeWindow(dpy, C->win, C->x, C->y ,C->w, C->bar->h);
	}
	for (c = pc; c && num; c = c->next, num--) {
		if (tile_check(M, C, c))
			XMoveResizeWindow(dpy, c->win, C->x, C->y, C->w, C->h);
	}
}
